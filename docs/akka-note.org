#+title: akka note

- easy to use object oriented actor model API

* info

  https://doc.akka.io/docs/akka/current/index.html

* actor model metaphor

  - people cooperating with each other,
    by sending messages to each other,
    and performing ones own duty.

* actor model as computation model

  - processing
  - storage
  - communication

* axiom of actor model

  - an actor handles one message at a time,
    when an actor receive a message, it can:

    1. create more actors
    2. send message to addresses
       - <person> ! <message>
         the use of `!` is like getting person's attention
    3. decide what to do with the next message it receives

  - *Indeterminacy*
    Turing machine is state base model of computation
    while, the configuration of actor model includes communication
    which can not be expressed in state base model.

  - x -
    the axiom 3 is the reason
    why some actor model users
    do not use side-effect on actors storage

    - without side-effect
      the state of an actor is explicitly expressed
      by the different receive functions
      (different ways of handling received messages)

    - with side-effect
      the state of an actor is encode by its storage
      (such as flags)

  - relation between address and actor
    - "one actor many addresses"
      if other actors forward their message to this actor
    - "one address many actors"
      if the implementation replicates the actor behind the scene
      or if one actor forward its message to many actors

    so we roughly have "one actor one address" relationship,
    because:
    - "one address many actors" is behind the scene or explicit
    - and "one actor many addresses" is explicit

  - address can express capability
    the only thing you can do to an address
    is to send it messages

    if you have the address of a powerful actor
    the actor behind it can do many things for you

  - features
    - no return-stack
    - can reply messages to many other actors
      - thus a type system of such model must be very expressive
      - the logic of the type system would be very different

* actor system

  - object oriented implementation of actor model

  - An ActorSystem is a heavyweight structure
    that will allocate 1…N Threads,
    so create one per logical application.

* hierarchical structure of actor system

  - tree of actors
    - use unix file system path
      to refer to actors in the tree
    - system of actors
      /<name>/system/
      /<name>/user/
      /<name>/user/<supervisor>/

  - designing such a system is to decide
    who should supervise what:
    - If one actor manages the work another actor is doing,
      e.g. by passing on sub-tasks,
      then the manager should supervise the child.
      The reason is that the manager knows
      which kind of failures are expected and how to handle them.
    - If one actor carries very important data
      (i.e. its state shall not be lost if avoidable),
      this actor should source out
      any possibly dangerous sub-tasks to children it supervises
      and handle failures of these children as appropriate.
      Depending on the nature of the requests,
      it may be best to create a new child for each request,
      which simplifies state management for collecting the replies.
      This is known as the "Error Kernel Pattern" from Erlang.
    - If one actor depends on another actor
      for carrying out its duty,
      it should watch that other actor’s liveness
      and act upon receiving a termination notice.
      This is different from supervision,
      as the watching party has no influence
      on the supervisor strategy,
      and it should be noted that a functional dependency alone
      is not a criterion for deciding
      where to place a certain child actor in the hierarchy.

  - supervision & error handling
    the supervisor delegates tasks to subordinates
    and therefore must respond to their failures.
    When a subordinate detects a failure (i.e. throws an exception),
    it suspends itself and all its subordinates
    and sends a message to its supervisor, signaling failure.
    Depending on the nature of the work to be supervised
    and the nature of the failure,
    the supervisor has a choice of the following four options:
    - Resume the subordinate,
      keeping its accumulated internal state
    - Restart the subordinate,
      clearing out its accumulated internal state
    - Stop the subordinate permanently
    - Escalate the failure, thereby failing itself

* actor best practices

  - Actors should be like nice co-workers:
    do their job efficiently
    without bothering everyone else needlessly
    and avoid hogging resources.
    Translated to programming this means
    to process events and generate responses (or more requests)
    in an event-driven manner.

  - Do not pass mutable objects between actors.

  - Do not pass closures between actors.

  - Not to much top-level actors.
    Maybe you only need one.

* actor in akka

  - An actor is a container for
    Behavior, a Mailbox,
    State,
    Child Actors and a Supervisor Strategy.

  - explicit lifecycle (no GC)

  - All of this is encapsulated behind an Actor Reference.
    - restarting an actor
      without needing to update references elsewhere,
    - placing the actual actor object on remote hosts,
    - sending messages to actors
      in completely different applications.

  - Because the internal state is vital to an actor's operations,
    having inconsistent state is fatal.
    Thus, when the actor fails and is restarted by its supervisor,
    the state will be created from scratch,
    like upon first creating the actor.
    This is to enable the ability of self-healing of the system.

  - Optionally, an actor’s state can be automatically recovered
    to the state before a restart by persisting received messages
    and replaying them after restart.

* akka -- toppings on the cake

  - lifecycle
    preStart
    postStop

  - default behavior
    restart child on child's exception

  - messaging
    - at-most-once delivery, that is, no guaranteed delivery
    - message ordering is maintained per sender, receiver pair

  - testing
    TestProbe

* protocol

  - a.k.a. frequently used message patterns
    (abstract class in object oriented language)

*** request-respond

*** delegate-respond

*** create-watch-terminate

*** scatter-gather

* http

  - Akka HTTP model contains a deeply structured,
    fully immutable, case-class based model
    of all the major HTTP data structures,
    like HTTP requests, responses and common headers.

    It lives in the akka-http-core module
    and forms the basis for most of Akka HTTP’s APIs.

* akke stream

  - API for stream processing, which solves:
    - giving back-pressure to producer
      by using pull-stream
      (not overflow any buffers or mailboxes in the process)
    - actor messages can be lost
      and must be retransmitted for stream

  - *back-pressure*
    to be able to limit the buffering that actors employ,
    they need to be able to slow down producers
    if the consumers cannot keep up.

  - x -
    the arch example of stream is HttpEntity stream

* backpressure

  - https://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7

  - The Wikipedia definition:
    Resistance or force opposing the desired flow of fluid through pipes.

  - For software:
    Resistance or force opposing the desired flow of data through software.

  - handling backpressure:
    - Control the producer (slow down/speed up is decided by consumer)
      - with pull-based streams, the consumer controls the producer
      - with push-based streams, the producer is in control
        and pushes data to the consumer when it’s available.
    - Buffer (accumulate incoming data spikes temporarily)
      - buffering is dangerous if unbounded.
        it is often better to start dropping
        than to fall over completely (run out of memory).
    - Drop (sample a percentage of the incoming data)
    - Ignore the backpressure 
      - which, to be honest, is not a bad idea
        if the backpressure isn’t causing critical issues.
        Introducing more complexity comes at a cost too.
